// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           UserRole         @default(ATHLETE)
  region         String?
  organization   String?
  phone          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  teams          TeamMember[]
  competitions   Registration[]
  organizedComps Competition[]    @relation("Organizer")
  achievements   Achievement[]
  invites        TeamInvitation[] @relation("InvitedUser")
  requests       TeamRequest[]    @relation("RequestUser")
}

enum UserRole {
  ADMIN
  ORGANIZER
  ATHLETE
  CAPTAIN
  REPRESENTATIVE
}

model Competition {
  id               String         @id @default(cuid())
  title            String
  type             CompetitionType
  discipline       String
  description      String?        @db.Text
  rules            String?        @db.Text
  prizes           String?        @db.Text
  region           String
  registrationStart DateTime
  registrationEnd  DateTime
  eventStart       DateTime
  eventEnd         DateTime
  maxParticipants  Int?
  currentParticipants Int          @default(0)
  status           CompetitionStatus @default(REGISTRATION_OPEN)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  organizerId      String
  organizer        User           @relation("Organizer", fields: [organizerId], references: [id])
  teams            Team[]
  registrations    Registration[]
  results          Result[]
}

enum CompetitionType {
  OPEN
  REGIONAL
  FEDERAL
}

enum CompetitionStatus {
  DRAFT
  MODERATION
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Team {
  id            String          @id @default(cuid())
  name          String
  competitionId String
  competition   Competition     @relation(fields: [competitionId], references: [id])
  captainId     String
  status        TeamStatus      @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  members       TeamMember[]
  invitations   TeamInvitation[]
  requests      TeamRequest[]
  results       Result[]
}

enum TeamStatus {
  PENDING
  CONFIRMED
  NEEDS_MEMBERS
  REJECTED
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  isCaptain Boolean  @default(false)
  joinedAt  DateTime @default(now())

  @@unique([teamId, userId])
}

model TeamInvitation {
  id        String           @id @default(cuid())
  teamId    String
  team      Team             @relation(fields: [teamId], references: [id])
  userId    String
  user      User             @relation("InvitedUser", fields: [userId], references: [id])
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([teamId, userId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model TeamRequest {
  id        String        @id @default(cuid())
  teamId    String
  team      Team          @relation(fields: [teamId], references: [id])
  userId    String
  user      User          @relation("RequestUser", fields: [userId], references: [id])
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([teamId, userId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Registration {
  id            String   @id @default(cuid())
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  status        RegistrationStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([competitionId, userId])
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Result {
  id            String   @id @default(cuid())
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id])
  teamId        String
  team          Team     @relation(fields: [teamId], references: [id])
  place         Int?
  score         Int?
  timeSpent     String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([competitionId, teamId])
}

model Achievement {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  title         String
  place         Int
  points        Int
  date          DateTime
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
